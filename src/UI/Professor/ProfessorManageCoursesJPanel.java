/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.Professor;

import java.time.LocalDate;
import java.time.ZoneId;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import model.Main.EducationSystem;
import model.Professor.ProfessorUCourses;
import model.Professor.Professor;

/**
 *
 * @author sidvi
 */
public class ProfessorManageCoursesJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ProfessorManageCoursesJPanel
     */
    
    private JPanel professorcardpanel;
    private EducationSystem lc;
    
    public ProfessorManageCoursesJPanel(JPanel professorcardpanel, EducationSystem lc) {
        initComponents();
        this.professorcardpanel=professorcardpanel;
        this.lc=lc;
       
        txtcourseprofid.setEnabled(false);
        txtpc_id.setEnabled(false);
        txtpc_name.setEnabled(false);
        txtpc_region.setEnabled(false);
        txtpc_capacity.setEnabled(false);
        txtpc_language.setEnabled(false);
        cstartdate.setEnabled(false);
        cenddate.setEnabled(false);
        btnsave.setEnabled(false);
        
        
        
        //populatetable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtpc_name = new javax.swing.JTextField();
        txtpc_id = new javax.swing.JTextField();
        txtpc_region = new javax.swing.JTextField();
        txtpc_language = new javax.swing.JTextField();
        txtpc_capacity = new javax.swing.JTextField();
        cstartdate = new com.toedter.calendar.JDateChooser();
        cenddate = new com.toedter.calendar.JDateChooser();
        btndelete = new javax.swing.JButton();
        btnupdatecourse = new javax.swing.JButton();
        btnsearch = new javax.swing.JButton();
        btnsave = new javax.swing.JButton();
        txtcourseprofid = new javax.swing.JTextField();
        txtsearch = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        btnreset = new javax.swing.JButton();
        btnreset1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(153, 204, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("MY COURSES");

        jTable1.setBackground(new java.awt.Color(204, 204, 204));
        jTable1.setFont(new java.awt.Font("Sitka Text", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "COURSE NAME", "COURSE ID", "COURSE START DATE", "COURSE END DATE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("COURSE ID");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setText("COURSE NAME");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel5.setText("COURSE START DATE");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel6.setText("COURSE REGION");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel7.setText("COURSE LANGUAGE");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel8.setText("COURSE END DATE");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel9.setText("COURSE CAPACITY");

        txtpc_name.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtpc_name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtpc_nameKeyPressed(evt);
            }
        });

        txtpc_id.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtpc_id.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtpc_idKeyPressed(evt);
            }
        });

        txtpc_region.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtpc_region.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtpc_regionKeyPressed(evt);
            }
        });

        txtpc_language.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtpc_language.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtpc_languageKeyPressed(evt);
            }
        });

        txtpc_capacity.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtpc_capacity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtpc_capacityActionPerformed(evt);
            }
        });
        txtpc_capacity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtpc_capacityKeyPressed(evt);
            }
        });

        btndelete.setBackground(new java.awt.Color(51, 51, 255));
        btndelete.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btndelete.setForeground(new java.awt.Color(255, 255, 255));
        btndelete.setText("DELETE COURSE");
        btndelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndeleteActionPerformed(evt);
            }
        });

        btnupdatecourse.setBackground(new java.awt.Color(0, 0, 255));
        btnupdatecourse.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnupdatecourse.setForeground(new java.awt.Color(255, 255, 255));
        btnupdatecourse.setText("UPDATE COURSE");
        btnupdatecourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnupdatecourseActionPerformed(evt);
            }
        });

        btnsearch.setBackground(new java.awt.Color(51, 51, 255));
        btnsearch.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnsearch.setForeground(new java.awt.Color(255, 255, 255));
        btnsearch.setText("SEARCH ");
        btnsearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsearchActionPerformed(evt);
            }
        });

        btnsave.setBackground(new java.awt.Color(51, 51, 255));
        btnsave.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnsave.setForeground(new java.awt.Color(255, 255, 255));
        btnsave.setText("SAVE");
        btnsave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsaveActionPerformed(evt);
            }
        });

        txtcourseprofid.setFont(new java.awt.Font("Sitka Text", 1, 14)); // NOI18N
        txtcourseprofid.setEnabled(false);
        txtcourseprofid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtcourseprofidActionPerformed(evt);
            }
        });

        txtsearch.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtsearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtsearchActionPerformed(evt);
            }
        });
        txtsearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtsearchKeyReleased(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setText(" COURSE ID:");

        btnreset.setBackground(new java.awt.Color(51, 51, 255));
        btnreset.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnreset.setForeground(new java.awt.Color(255, 255, 255));
        btnreset.setText("RESET ");
        btnreset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnresetActionPerformed(evt);
            }
        });

        btnreset1.setBackground(new java.awt.Color(51, 51, 255));
        btnreset1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnreset1.setForeground(new java.awt.Color(255, 255, 255));
        btnreset1.setText("VIEW COURSES");
        btnreset1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnreset1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 650, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtcourseprofid, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(208, 208, 208)
                            .addComponent(btnreset1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btndelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnupdatecourse)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnreset, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 864, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(203, 203, 203)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnsave)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel9)
                                .addComponent(jLabel6)
                                .addComponent(jLabel8)
                                .addComponent(cenddate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cstartdate, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel7)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtpc_language, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(jLabel3)
                                            .addGap(82, 82, 82))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel2)
                                            .addGap(118, 118, 118)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtpc_id)
                                        .addComponent(txtpc_region)
                                        .addComponent(txtpc_capacity)
                                        .addComponent(txtpc_name, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addGap(50, 50, 50))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtcourseprofid, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnreset1)
                            .addComponent(btndelete))
                        .addGap(5, 5, 5))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnsearch)
                            .addComponent(txtsearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addGap(3, 3, 3)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(btnupdatecourse))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(btnreset)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtpc_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtpc_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtpc_capacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtpc_region, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtpc_language, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cstartdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(cenddate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnsave)
                .addContainerGap(118, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtpc_capacityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtpc_capacityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtpc_capacityActionPerformed

    private void btndeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndeleteActionPerformed
        // TODO add your handling code here:
        
        int selectedrow=jTable1.getSelectedRow();
        if (selectedrow>=0)
        {
            int dialogButton=JOptionPane.YES_NO_OPTION;
            int dialogResult=JOptionPane.showConfirmDialog(null, "Proceed to delete course?", "Warning",dialogButton);
            if (dialogResult==JOptionPane.YES_OPTION)
            {
                Integer courseId = (Integer) jTable1.getValueAt(selectedrow, 1);//
                //String profid=txtcourseprofid.getText();
                for(ProfessorUCourses course:lc.ProfessorUCourseslist)
                {
                if(courseId==course.getPCourseId())
                {
                    lc.deleteprofcourse(course);
                    populatetable();
                }
                }
            }
        }
        else 
            {
                JOptionPane.showMessageDialog(null, "Please select row to delete ","INFORMATION",JOptionPane.INFORMATION_MESSAGE);
            }
        
    }//GEN-LAST:event_btndeleteActionPerformed

    private void btnupdatecourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnupdatecourseActionPerformed
        // TODO add your handling code here:
         int selectedRow = jTable1.getSelectedRow();
        
         if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to update.");
            return;
        }
         
        ProfessorUCourses course=(ProfessorUCourses)jTable1.getValueAt(selectedRow, 0);
        
        Date startdate = Date.from(course.getPCourseStartDate().atStartOfDay().toInstant(java.time.ZoneOffset.UTC));
        Date enddate = Date.from(course.getPCourseEndDate().atStartOfDay().toInstant(java.time.ZoneOffset.UTC));

        txtpc_id.setText(String.valueOf(course.getPCourseId()));
        txtpc_name.setText(course.getPCourseName());
        txtpc_region.setText(course.getPCourseRegion());
        txtpc_capacity.setText(String.valueOf(course.getCourseRegLimit()));
        txtpc_language.setText(course.getPCourseLanguage());
        cstartdate.setDate(startdate);
        cenddate.setDate(enddate);
        
        txtpc_id.setEnabled(true);
        txtpc_name.setEnabled(true);
        txtpc_region.setEnabled(true);
        txtpc_capacity.setEnabled(true);
        txtpc_language.setEnabled(true);
        cstartdate.setEnabled(true);
        cenddate.setEnabled(true);
        btnsave.setEnabled(true);
        
        
    }//GEN-LAST:event_btnupdatecourseActionPerformed

    private void btnsaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsaveActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = jTable1.getSelectedRow();
        
         if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to update.");
            return;
        }
         
        ProfessorUCourses course=(ProfessorUCourses)jTable1.getValueAt(selectedRow, 0);
        
        String updatedname = txtpc_name.getText(); 
        String idtext=txtpc_id.getText();
        String updatedregion=txtpc_region.getText();
        String updatedlanguage=txtpc_language.getText();
        String txtcapacity=txtpc_capacity.getText();
        Date selectedstartdate = cstartdate.getDate();
        Date selectedenddate = cenddate.getDate();
        
        
        if (updatedname.isEmpty() || idtext.isEmpty()|| updatedregion.isEmpty() || updatedlanguage.isEmpty() || txtcapacity.isEmpty() || selectedstartdate==null || selectedenddate==null)
        {
            JOptionPane.showMessageDialog(this, "Please fill in all details before updating.");
            return;
        }
        
          if (idtext.matches(".*[^0-9\\s].*")) {
            JOptionPane.showMessageDialog(this, "Course ID can only contain numbers");
            txtpc_id.setText("");
            return;
        }
        
        if (txtcapacity.matches(".*[^0-9\\s].*")) {
            JOptionPane.showMessageDialog(this, "Course capacity can only contain numbers");
            txtpc_capacity.setText("");
            return;
        }
        
        if (updatedname.matches(".*[^a-zA-Z\\s].*")) {
            JOptionPane.showMessageDialog(this, "Course Name can only contain alphabets");
            txtpc_name.setText("");
            return;
        }
        
        if (updatedregion.matches(".*[^a-zA-Z\\s].*")) {
            JOptionPane.showMessageDialog(this, "Course region can only contain alphabets");
            txtpc_region.setText("");
            return;
        }
        
        if (updatedlanguage.matches(".*[^a-zA-Z\\s].*")) {
            JOptionPane.showMessageDialog(this, "Course language can only contain alphabets");
            txtpc_language.setText("");
            return;
        }
        
        LocalDate updatedstartdate = selectedstartdate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        LocalDate updatedenddate = selectedenddate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        long daysDifference = ChronoUnit.DAYS.between(updatedstartdate, updatedenddate);
        
        if(daysDifference<120)// 4months-1 semester calculation 
        {
            JOptionPane.showMessageDialog(this, "Course must be planned for atleast 1 semester(120days)");
            JOptionPane.showMessageDialog(this, "Current course duration is: " + daysDifference);
            cstartdate.setDate(null);
            cenddate.setDate(null);
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int updatedcourseid=Integer.parseInt(txtpc_id.getText());
        int updatecoursecapacity= Integer.parseInt(txtpc_capacity.getText());
        
        for (int row = 0; row < model.getRowCount(); row++) {
            if (row != selectedRow) { // Skip the currently selected row
                int existingID = ((ProfessorUCourses)model.getValueAt(row, 0)).getPCourseId(); 
                if (existingID == updatedcourseid) {
                    JOptionPane.showMessageDialog(this, "ID already exists");
                    return;
                }
            }
        }
        
         model.setValueAt(updatedname, selectedRow, 0);
         model.setValueAt(updatedcourseid, selectedRow, 1);
         model.setValueAt(updatedstartdate, selectedRow, 2);
         model.setValueAt(updatedenddate, selectedRow, 3);
            
        ProfessorUCourses course1 = lc.ProfessorUCourseslist.get(selectedRow);
        course1.setPCourseName(updatedname);
        course1.setPCourseId(updatedcourseid);
        course1.setPCourseRegion(updatedregion);
        course1.setPCourseLanguage(updatedlanguage);
        course1.setCourseRegLimit(updatecoursecapacity);
        course1.setPCourseStartDate(updatedstartdate);
        course1.setPCourseEndDate(updatedenddate);
            
        JOptionPane.showMessageDialog(this, "Course Updated succesfully");
        
        for (ProfessorUCourses course2 : lc.ProfessorUCourseslist) {
            System.out.println("NEW COURSE");
            System.out.println("Course ID: " + course2.getPCourseId());
            System.out.println("Course Name: " + course2.getPCourseName());
            System.out.println("Course region: " + course2.getPCourseRegion());
            System.out.println("Course language: " + course2.getPCourseLanguage());
            System.out.println("course capacity: " + course2.getCourseRegLimit());
            System.out.println("course startdate: " + course2.getPCourseStartDate());
            System.out.println("course enddate: " + course2.getPCourseEndDate());
            System.out.println("\n");
        }
        
        txtpc_id.setText("");
        txtpc_name.setText("");
        txtpc_region.setText("");
        txtpc_capacity.setText("");
        txtpc_language.setText("");
        cstartdate.setDate(null);
        cenddate.setDate(null);
        
        txtpc_id.setEnabled(false);
        txtpc_name.setEnabled(false);
        txtpc_region.setEnabled(false);
        txtpc_capacity.setEnabled(false);
        txtpc_language.setEnabled(false);
        cstartdate.setEnabled(false);
        cenddate.setEnabled(false);
        btnsave.setEnabled(false);
    
        jTable1.getSelectionModel().clearSelection();
        
    }//GEN-LAST:event_btnsaveActionPerformed

    private void txtcourseprofidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtcourseprofidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtcourseprofidActionPerformed

    private void txtpc_idKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtpc_idKeyPressed
        // TODO add your handling code here:
        int c = evt.getKeyChar();
        if(Character.isLetter(c)){
            txtpc_id.setEditable(false);
        }
        else{
            txtpc_id.setEditable(true);
        }
    }//GEN-LAST:event_txtpc_idKeyPressed

    private void txtpc_nameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtpc_nameKeyPressed
        // TODO add your handling code here:
        char c = evt.getKeyChar();

        if(Character.isLetter(c) || Character.isWhitespace(c) || Character.isISOControl(c)){
            txtpc_name.setEditable(true);
        }
        else{
            txtpc_name.setEditable(false);
        }
    }//GEN-LAST:event_txtpc_nameKeyPressed

    private void txtpc_regionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtpc_regionKeyPressed
        // TODO add your handling code here:
        char c = evt.getKeyChar();

        if(Character.isLetter(c) || Character.isWhitespace(c) || Character.isISOControl(c)){
            txtpc_region.setEditable(true);
        }
        else{
            txtpc_region.setEditable(false);
        }
    }//GEN-LAST:event_txtpc_regionKeyPressed

    private void txtpc_languageKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtpc_languageKeyPressed
        // TODO add your handling code here:
         char c = evt.getKeyChar();

        if(Character.isLetter(c) || Character.isWhitespace(c) || Character.isISOControl(c)){
            txtpc_language.setEditable(true);
        }
        else{
            txtpc_language.setEditable(false);
        }
    }//GEN-LAST:event_txtpc_languageKeyPressed

    private void txtpc_capacityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtpc_capacityKeyPressed
        // TODO add your handling code here:
        int c = evt.getKeyChar();
        if(Character.isLetter(c)){
            txtpc_capacity.setEditable(false);
        }
        else{
            txtpc_capacity.setEditable(true);
        }
    }//GEN-LAST:event_txtpc_capacityKeyPressed

    private void txtsearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtsearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtsearchActionPerformed

    private void txtsearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtsearchKeyReleased

    }//GEN-LAST:event_txtsearchKeyReleased

    private void btnsearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsearchActionPerformed
        // TODO add your handling code here:

        if (txtsearch.getText().length()<=0){

            JOptionPane.showMessageDialog(this, "Please enter COURSE ID to search");
            return;
        }
        int columnIndexToSearch = 1;//
        DefaultTableModel obj=(DefaultTableModel) jTable1.getModel();
        TableRowSorter< DefaultTableModel> obj1= new TableRowSorter<>(obj);
        jTable1.setRowSorter(obj1);
        obj1.setRowFilter(RowFilter.regexFilter(txtsearch.getText(),columnIndexToSearch) );

        txtsearch.setText("");
        //populateTable();
    }//GEN-LAST:event_btnsearchActionPerformed

    private void btnresetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnresetActionPerformed
        // TODO add your handling code here:
        TableRowSorter<DefaultTableModel> sorter = (TableRowSorter<DefaultTableModel>) jTable1.getRowSorter();
        sorter.setRowFilter(null);

    }//GEN-LAST:event_btnresetActionPerformed

    private void btnreset1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnreset1ActionPerformed
        // TODO add your handling code here:
        populatetable();
    }//GEN-LAST:event_btnreset1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btndelete;
    private javax.swing.JButton btnreset;
    private javax.swing.JButton btnreset1;
    private javax.swing.JButton btnsave;
    private javax.swing.JButton btnsearch;
    private javax.swing.JButton btnupdatecourse;
    private com.toedter.calendar.JDateChooser cenddate;
    private com.toedter.calendar.JDateChooser cstartdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    public javax.swing.JTextField txtcourseprofid;
    private javax.swing.JTextField txtpc_capacity;
    private javax.swing.JTextField txtpc_id;
    private javax.swing.JTextField txtpc_language;
    private javax.swing.JTextField txtpc_name;
    private javax.swing.JTextField txtpc_region;
    private javax.swing.JTextField txtsearch;
    // End of variables declaration//GEN-END:variables

    public void populatetable() {
        //String profid=txtcourseprofid.getText();
         String idtext=txtcourseprofid.getText();
         int id=Integer.parseInt(idtext);
       
        
        System.out.println(" ID INSIDE POPULATE: " + id);
        
        DefaultTableModel model=(DefaultTableModel) jTable1.getModel(); //type casting tablemodel to defaulttablemodel for jtable
        model.setRowCount(0); //deleting empty records
        
        System.out.println("size of professorlist: " + (lc.ProfessorList).size());
        for(Professor p: lc.ProfessorList)
        {
            if (id==(p.getProfessorUserId()))
            {
                String name=p.getProfessorName();
                for(ProfessorUCourses pc : lc.getProfessorUCourseslist())
                {
                    if(name.equals(pc.getCProfessorName()))
                    {
                        Object[] row=new Object[4];
                        
                        row[0]=pc; 
                        row[1]=pc.getPCourseId();
                        row[2]=pc.getPCourseStartDate();
                        row[3]=pc.getPCourseEndDate();
            
                        model.addRow(row);
                    }
                }
            }
        }
    }
}
